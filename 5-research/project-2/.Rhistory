setwd("C:/Users/an260736/myassignments/datascience/k125-datascience-jhu/5-research/project-2")
x<-data.frame("a", "b")
x
y<-list("a", "b")
y
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
df
wipstormdata <-read.table(zippeddatafile, header=TRUE, sep=",", na.strings="NA",
stringsAsFactors=FALSE)
zippeddatafile <-"StormData.csv.bz2"
wipstormdata <-read.table(zippeddatafile, header=TRUE, sep=",", na.strings="NA",
stringsAsFactors=FALSE)
str(wipstormdata)
unique(wipstormdata$CROPDMGEXP)
unique(wipstormdata$PROPDMGEXP)
wipstormdata<-subset(wipstormdata, !is.na(PROPDMG) & !is.na(CROPDMG) & (PROPDMG>0 | CROPDMG>0))
head(wipstormdata)
if (wipstormdata$PROPDMGEXP=="K" || wipstormdata$CROPDMGEXP=="K"){
wipstormdata$PROPDMGEXP<-3
wipstormdata$CROPDMGEXP<-3
}
normalizeexp<-function(){}
unique(wipstormdata$PROPDMGEXP)
[1] "K" "M" ""  "B" "m" "+" "0" "5" "6" "?" "4" "2" "3" "h" "7" "H" "-" "1" "8"
unique(wipstormdata$CROPDMGEXP)
##[1] ""  "M" "K" "m" "B" "?" "0" "k" "2"
##It is clear that there are some additional values. Data operators seem to be indepreted         these as truely exponential. So 2 is x100, 3 is x1000, 4 is x10000 etc.
##So lets standardize
if (wipstormdata$PROPDMGEXP=="H" || wipstormdata$PROPDMGEXP=="h"){
wipstormdata$PROPDMGEXP<-2
}
if (wipstormdata$CROPDMGEXP=="H" || wipstormdata$CROPDMGEXP=="h"){
wipstormdata$CROPDMGEXP<-2
}
if (wipstormdata$PROPDMGEXP=="K" || wipstormdata$PROPDMGEXP=="k"){
wipstormdata$PROPDMGEXP<-3
}
if (wipstormdata$CROPDMGEXP=="K" || wipstormdata$CROPDMGEXP=="k"){
wipstormdata$CROPDMGEXP<-3
}
if (wipstormdata$PROPDMGEXP=="M" || wipstormdata$PROPDMGEXP=="m"){
wipstormdata$PROPDMGEXP<-6
}
if (wipstormdata$CROPDMGEXP=="M" || wipstormdata$CROPDMGEXP=="m"){
wipstormdata$CROPDMGEXP<-6
}
if (wipstormdata$PROPDMGEXP=="B" || wipstormdata$PROPDMGEXP=="b"){
wipstormdata$PROPDMGEXP<-9
}
if (wipstormdata$CROPDMGEXP=="B" || wipstormdata$CROPDMGEXP=="b"){
wipstormdata$CROPDMGEXP<-9
}
if (wipstormdata$PROPDMGEXP==""){}
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP==""){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="?"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="?"){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="+"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="+"){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="-"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="-"){
wipstormdata$CROPDMGEXP<-0
}
}
normalizeexp<-function(){
unique(wipstormdata$PROPDMGEXP)
[1] "K" "M" ""  "B" "m" "+" "0" "5" "6" "?" "4" "2" "3" "h" "7" "H" "-" "1" "8"
unique(wipstormdata$CROPDMGEXP)
##[1] ""  "M" "K" "m" "B" "?" "0" "k" "2"
##It is clear that there are some additional values. Data operators seem to be indepreted         these as truely exponential. So 2 is x100, 3 is x1000, 4 is x10000 etc.
##So lets standardize
if (wipstormdata$PROPDMGEXP=="H" || wipstormdata$PROPDMGEXP=="h"){
wipstormdata$PROPDMGEXP<-2
}
if (wipstormdata$CROPDMGEXP=="H" || wipstormdata$CROPDMGEXP=="h"){
wipstormdata$CROPDMGEXP<-2
}
if (wipstormdata$PROPDMGEXP=="K" || wipstormdata$PROPDMGEXP=="k"){
wipstormdata$PROPDMGEXP<-3
}
if (wipstormdata$CROPDMGEXP=="K" || wipstormdata$CROPDMGEXP=="k"){
wipstormdata$CROPDMGEXP<-3
}
if (wipstormdata$PROPDMGEXP=="M" || wipstormdata$PROPDMGEXP=="m"){
wipstormdata$PROPDMGEXP<-6
}
if (wipstormdata$CROPDMGEXP=="M" || wipstormdata$CROPDMGEXP=="m"){
wipstormdata$CROPDMGEXP<-6
}
if (wipstormdata$PROPDMGEXP=="B" || wipstormdata$PROPDMGEXP=="b"){
wipstormdata$PROPDMGEXP<-9
}
if (wipstormdata$CROPDMGEXP=="B" || wipstormdata$CROPDMGEXP=="b"){
wipstormdata$CROPDMGEXP<-9
}
if (wipstormdata$PROPDMGEXP==""){}
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP==""){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="?"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="?"){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="+"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="+"){
wipstormdata$CROPDMGEXP<-0
}
if (wipstormdata$PROPDMGEXP=="-"){
wipstormdata$PROPDMGEXP<-0
}
if (wipstormdata$CROPDMGEXP=="-"){
wipstormdata$CROPDMGEXP<-0
}
}
if (wipstormdata$CROPDMGEXP=="-"){
wipstormdata$CROPDMGEXP<-0
}
str(wipstormdata$CROPDMGEXP)
unique(wipstormdata$PROPDMGEXP)
unique(wipstormdata$CROPDMGEXP)
if (wipstormdata$CROPDMGEXP=="B" || wipstormdata$CROPDMGEXP=="b"){
}
wipstormdata <-read.table(zippeddatafile, header=TRUE, sep=",", na.strings="NA",
stringsAsFactors=FALSE)
unique(wipstormdata$PROPDMGEXP)
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="H")]<-2
unique(wipstormdata$PROPDMGEXP)
10^2
x<-function()
{}
x
##So lets standardize
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="H")]<-2
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="h")]<-2
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="K")]<-3
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="k")]<-3
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="M")]<-6
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="m")]<-6
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="B")]<-9
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="b")]<-9
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="?")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="+")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="-")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="H")]<-2
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="h")]<-2
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="K")]<-3
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="k")]<-3
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="M")]<-6
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="m")]<-6
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="B")]<-9
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="b")]<-9
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="?")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="+")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="-")]<-0
unique(wipstormdata$PROPDMGEXP)
unique(wipstormdata$CROPDMGEXP)
unique(wipstormdata$PROPDMGEXP)
?arrange
castedstormdatabyevent <- mutate(castedstormdatabyevent, PROPDMG=PROPDMG*(10^PROPDMGEXP), CROPDMG=CROPDMG*(10^CROPDMGEXP))
suppressWarnings(library(lubridate)) ##Required for date manipulation
suppressWarnings(library(reshape2)) ##For melt and cast
suppressWarnings(library(lattice)) ##Will use Lattice Graphing system for the last plot
suppressWarnings(suppressMessages(library(dplyr)))##Required to mutate
suppressWarnings(library(xtable)) ##To output tables
wipstormdata<-subset(wipstormdata, !is.na(PROPDMG) & !is.na(CROPDMG) & (PROPDMG>0 | CROPDMG>0))
str(wipstormdata)
castedstormdatabyevent <- mutate(castedstormdatabyevent, PROPDMG=PROPDMG*(10^PROPDMGEXP), CROPDMG=CROPDMG*(10^CROPDMGEXP))
wipstormdata <- mutate(wipstormdata, PROPDMG=PROPDMG*(10^PROPDMGEXP), CROPDMG=CROPDMG*(10^CROPDMGEXP))
wipstormdata <- mutate(wipstormdata, PROPDMG=PROPDMG*(10^(as.numeric(PROPDMGEXP))), CROPDMG=CROPDMG*(10^(as.numeric(CROPDMGEXP))))
str(wipstormdata)
prettyNum(12345.678)
prettyNum(12345.678,big.mark=",")
x<- prettyNum(12345.678,big.mark=",")
x
class(x)
x<- as.numeric(prettyNum(12345.678,big.mark=","))
x
formatC(12345.678, digits=0, format="f")
x<-formatC(12345.678, digits=0, format="f")
x
class(x)
x<-as.numeric(formatC(12345.678, digits=0, format="f"))
x
class(x)
x<-as.numeric(formatC(12345.678, digits=0))
x
x<-as.numeric(formatC(12345.678, digits=0, format="f"))
x
round(12344.56)
round(12344.00)
par(mfcol=c(1,1))
with(head(castedstormdatabyevent,25), {plot(EVTYPE, HEALTHIMPACT, type="l",
main="Health Impact (Fatalities + Injuries) vs EVENT TYPE",
xlab="Event Types",
ylab="Health Impact", col="blue", , xaxt="n", cex.axis=0.75)
axis(1, at=EVTYPE,labels=EVTYPE, col.axis="black", las=0, cex.axis=0.75)
text(eventtypewithmaxheathimpact, maxheathimpact, paste0("(", eventtypewithmaxheathimpact, ",",
maxheathimpact, ")"), cex=0.60, pos=4, col="red")
##Horizontal Line
abline(h = maxheathimpact, col = "grey", lty=2)
##Vertical Line
abline(v = eventtypewithmaxheathimpact, col = "grey", lty=2)
}
)
wipstormdata<-subset(wipstormdata, !is.na(FATALITIES) & !is.na(INJURIES) & (FATALITIES>0 | INJURIES>0))
meltedstormdatabyevent <- melt(wipstormdata, id.vars = c("EVTYPE"), measure.vars=c("FATALITIES", "INJURIES"))
##Then cast the data set with event type as ID and calculate the average by event type
castedstormdatabyevent <- dcast(meltedstormdatabyevent, EVTYPE~variable,sum)
castedstormdatabyevent <- mutate(castedstormdatabyevent, HEALTHIMPACT=round(FATALITIES+INJURIES))
castedstormdatabyevent<-arrange(castedstormdatabyevent,desc(HEALTHIMPACT))
maxheathimpact<-max(castedstormdatabyevent$HEALTHIMPACT)
eventtypewithmaxheathimpact<-castedstormdatabyevent[which(castedstormdatabyevent$HEALTHIMPACT==maxheathimpact), ][1,1]
par(mfcol=c(1,1))
with(head(castedstormdatabyevent,25), {plot(EVTYPE, HEALTHIMPACT, type="l",
main="Health Impact (Fatalities + Injuries) vs EVENT TYPE",
xlab="Event Types",
ylab="Health Impact", col="blue", , xaxt="n", cex.axis=0.75)
axis(1, at=EVTYPE,labels=EVTYPE, col.axis="black", las=0, cex.axis=0.75)
text(eventtypewithmaxheathimpact, maxheathimpact, paste0("(", eventtypewithmaxheathimpact, ",",
maxheathimpact, ")"), cex=0.60, pos=4, col="red")
##Horizontal Line
abline(h = maxheathimpact, col = "grey", lty=2)
##Vertical Line
abline(v = eventtypewithmaxheathimpact, col = "grey", lty=2)
}
)
x<-head(castedstormdatabyevent,25)
x
with(x, {plot(EVTYPE, HEALTHIMPACT, type="l",
main="Health Impact (Fatalities + Injuries) vs EVENT TYPE",
xlab="Event Types",
ylab="Health Impact", col="blue", , xaxt="n", cex.axis=0.75)
axis(1, at=EVTYPE,labels=EVTYPE, col.axis="black", las=0, cex.axis=0.75)
text(eventtypewithmaxheathimpact, maxheathimpact, paste0("(", eventtypewithmaxheathimpact, ",",
maxheathimpact, ")"), cex=0.60, pos=4, col="red")
##Horizontal Line
abline(h = maxheathimpact, col = "grey", lty=2)
##Vertical Line
abline(v = eventtypewithmaxheathimpact, col = "grey", lty=2)
}
)
with(x, {plot(EVTYPE, HEALTHIMPACT, type="l",
main="Health Impact (Fatalities + Injuries) vs EVENT TYPE",
xlab="Event Types",
ylab="Health Impact", col="blue", , xaxt="n", cex.axis=0.75)
axis(1, at=EVTYPE,labels=EVTYPE, col.axis="black", las=0, cex.axis=0.75)
text(eventtypewithmaxheathimpact, maxheathimpact, paste0("(", eventtypewithmaxheathimpact, ",",
maxheathimpact, ")"), cex=0.60, pos=4, col="red")
##Horizontal Line
abline(h = maxheathimpact, col = "grey", lty=2)
##Vertical Line
abline(v = eventtypewithmaxheathimpact, col = "grey", lty=2)
}
)
plot(EVTYPE, HEALTHIMPACT, type="l")
with(x, {plot(EVTYPE, HEALTHIMPACT, type="l")
}
)
x<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
plottable <- table(x$EVTYPE)
barplot(plottable, main="Health Impact vs Event Types",
xlab="Event Types")
plottable
x
x
x<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
plottable <- table(x$EVTYPE,x$ECONOMICCOST)
barplot(plottable, main="Health Impact vs Event Types",
xlab="Event Types")
plottable
cars <- c(1, 3, 6, 4, 9)
barplot(cars)
x<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
plottable <- table()
barplot(x$ECONOMICCOST, names.arg=x$EVTYPE, main="Health Impact vs Event Types",
xlab="Event Types")
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
y <- table(top$ECONOMICCOST)
x <- table(top$EVTYPE)
barplot(y, names.arg=x, main="Health Impact vs Event Types",
xlab="Event Types")
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
y <- table(top$ECONOMICCOST)
x <- table(top$EVTYPE)
barplot(y, main="Health Impact vs Event Types",
xlab="Event Types")
wipstormdata<-subset(wipstormdata, !is.na(PROPDMG) & !is.na(CROPDMG) & (PROPDMG>0 | CROPDMG>0))
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="H")]<-2
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="h")]<-2
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="K")]<-3
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="k")]<-3
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="M")]<-6
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="m")]<-6
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="B")]<-9
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="b")]<-9
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="?")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="+")]<-0
wipstormdata$PROPDMGEXP[which(wipstormdata$PROPDMGEXP=="-")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="H")]<-2
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="h")]<-2
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="K")]<-3
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="k")]<-3
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="M")]<-6
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="m")]<-6
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="B")]<-9
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="b")]<-9
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="?")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="+")]<-0
wipstormdata$CROPDMGEXP[which(wipstormdata$CROPDMGEXP=="-")]<-0
wipstormdata <- mutate(wipstormdata, PROPDMG=PROPDMG*(10^(as.numeric(PROPDMGEXP))), CROPDMG=CROPDMG*(10^(as.numeric(CROPDMGEXP))))
##One can use group by approach below but I like melt and cast
##Now melt the data set with event type as ID.
meltedstormdatabyevent <- melt(wipstormdata, id.vars = c("EVTYPE"), measure.vars=c("PROPDMG", "CROPDMG"))
##Then cast the data set with event type as ID and calculate the average by event type
castedstormdatabyevent <- dcast(meltedstormdatabyevent, EVTYPE~variable,sum)
##Introduce a column ECONOMICCOST that is a sum of PROPDMG and CROPDMG
castedstormdatabyevent <- mutate(castedstormdatabyevent, ECONOMICCOST=round(PROPDMG+CROPDMG))
##Order by ECONOMICCOST
castedstormdatabyevent<-arrange(castedstormdatabyevent,desc(ECONOMICCOST))
##Get the max economic cost and the corresponding event
maxeconomiccost<-max(castedstormdatabyevent$ECONOMICCOST)
eventtypewithmaxeconomiccost<-castedstormdatabyevent[which(castedstormdatabyevent$ECONOMICCOST==maxeconomiccost), ][1,1]
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
y <- table(top$ECONOMICCOST)
x <- table(top$EVTYPE)
x
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
y <- top$ECONOMICCOST
x <- top$EVTYPE
x
y
top<-head(castedstormdatabyevent, 25)
top
castedstormdatabyevent <- mutate(castedstormdatabyevent, ECONOMICCOST=round(PROPDMG+CROPDMG))
##Order by ECONOMICCOST
castedstormdatabyevent<-arrange(castedstormdatabyevent,desc(ECONOMICCOST))
castedstormdatabyevent
castedstormdatabyevent <- mutate(castedstormdatabyevent, ECONOMICCOST=(PROPDMG+CROPDMG))
castedstormdatabyevent
castedstormdatabyevent <- dcast(meltedstormdatabyevent, EVTYPE~variable,sum)
castedstormdatabyevent
head(castedstormdatabyevent)
zippeddatafile <-"StormData.csv.bz2"
if (!file.exists(zippeddatafile)){
download.file(zippeddataURL, zippeddatafile)
dateDownloaded<-date()
}
##Now read the file in with the right parameters.
wipstormdata <-read.table(zippeddatafile, header=TRUE, sep=",", na.strings="NA",
stringsAsFactors=FALSE)
wipstormdata<-subset(wipstormdata, !is.na(FATALITIES) & !is.na(INJURIES) & (FATALITIES>0 | INJURIES>0))
##One can use group by approach below but I like melt and cast
##Now melt the data set with event type as ID.
meltedstormdatabyevent <- melt(wipstormdata, id.vars = c("EVTYPE"), measure.vars=c("FATALITIES", "INJURIES"))
##Then cast the data set with event type as ID and calculate the average by event type
castedstormdatabyevent <- dcast(meltedstormdatabyevent, EVTYPE~variable,sum)
##Introduce a column HEALTHIMPACT that is a sum of FATALITIES and INJURIES
castedstormdatabyevent <- mutate(castedstormdatabyevent, HEALTHIMPACT=FATALITIES+INJURIES)
##Order by HEALTHIMPACT
castedstormdatabyevent<-arrange(castedstormdatabyevent,desc(HEALTHIMPACT))
castedstormdatabyevent
castedstormdatabyevent <- mutate(castedstormdatabyevent, HEALTHIMPACT=round(FATALITIES+INJURIES))
castedstormdatabyevent
##Order by HEALTHIMPACT
castedstormdatabyevent<-arrange(castedstormdatabyevent,desc(HEALTHIMPACT))
##Get the max health impact and the corresponding event
maxheathimpact<-max(castedstormdatabyevent$HEALTHIMPACT)
eventtypewithmaxheathimpact<-castedstormdatabyevent[which(castedstormdatabyevent$HEALTHIMPACT==maxheathimpact), ][1,1]
castedstormdatabyevent
top<-head(castedstormdatabyevent, 25)
top
par(mfcol=c(1,1))
y <- top$HEALTHIMPACT
x <- top$EVTYPE
barplot(y, main="Health Impact vs Event Types",
xlab="Event Types")
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
y <- top$HEALTHIMPACT
x <- top$EVTYPE
barplot(y, names.arg=x, main="Health Impact vs Event Types",
xlab="Event Types", ylab="Health Impact")
with(top, {plot(EVTYPE, HEALTHIMPACT, type="l",
main="Average Steps across Days by Interval",
xlab="Interval",
ylab="Average Number of Steps", col="blue", , xaxt="n", cex.axis=0.75)
axis(1, at=EVTYPE,labels=EVTYPE, col.axis="black", las=0, cex.axis=0.75)
text(eventtypewithmaxheathimpact, maxheathimpact, paste0("(", eventtypewithmaxheathimpact, ",",
maxheathimpact, ")"), cex=0.60, pos=4, col="red")
##Horizontal Line
abline(h = maxheathimpact, col = "grey", lty=2)
##Vertical Line
abline(v = eventtypewithmaxheathimpact, col = "grey", lty=2)
}
)
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
barplot(top$HEALTHIMPACT, names.arg=top$EVTYPE, main="Health Impact vs Event Types",
xlab="Event Types", ylab="Health Impact", col="red")
top<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
barplot(top$HEALTHIMPACT, names.arg=top$EVTYPE, main="Health Impact vs Event Types",
xlab="Event Types", ylab="Health Impact", col=rainbow(10))
prettyNum(121123213213.55, big.mark=",")
top25<-head(castedstormdatabyevent, 25)
par(mfcol=c(1,1))
barplot(top25$HEALTHIMPACT, names.arg=top25$EVTYPE, main="Plot 1: Health Impact (Fatalities+Injuries) vs Event Types",
xlab="Event Types", ylab="Health Impact", col=rainbow(25))
##Print the table (the top 25 rows)
top25<-mutate(top25, FATALITIES=prettyNum(FATALITIES, big.mark=","),INJUNRIES=prettyNum(INJUNRIES, big.mark=","), HEALTHIMPACT=prettyNum(HEALTHIMPACT, big.mark=","))
top25<-mutate(top25, FATALITIES=prettyNum(FATALITIES, big.mark=","),INJURIES=prettyNum(INJURIES, big.mark=","), HEALTHIMPACT=prettyNum(HEALTHIMPACT, big.mark=","))
