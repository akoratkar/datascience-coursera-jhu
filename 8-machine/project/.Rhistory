trainingdatafile<-"pml-training.csv"
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", trainingdatafile)
setwd("C:/Users/an260736.WIPRO/mysource/k125-datascience-jhu/8-machine/project")
trainingdatafile<-"pml-training.csv"
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", trainingdatafile)
training <-read.table(trainingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
names(training)
head(training)
testingdatafile<-"pml-testing.csv"
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", trainingdatafile)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", testingdatafile)
testing <-read.table(testingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
print(dim(testing))
print(dim(training))
intrainpart<-createDataPartition(y=training$classe,p=0.70, list=FALSE)
trainingpart<-spam[intrainpart,]
testingpart<-spam[-intrainpart,]
library(caret)
intrainpart<-createDataPartition(y=training$classe,p=0.70, list=FALSE)
trainingpart<-training[intrainpart,]
testingpart<-training[-intrainpart,]
print(dim(trainingpart))
print(dim(testingpart))
print(dim(training))
training<-training[complete.cases(training, )]
training<-training[complete.cases(training),]
print(dim(training))
training <-read.table(trainingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
print(dim(training))
training1<-na.omit(training)
head(training)
names(training)
head(training, 1)
training <- training[,8:160]
testing <- testing[,8:160]
dim(training)
dim(testing)
training1<-training[, colSums(is.na(training)) != nrow(training)]
dim(testing)
dim(training)
dim(training1)
training<-training[, colSums(is.na(training)) != nrow(training)]
testing<-testing[, colSums(is.na(training)) != nrow(testing)]
dim(training)
dim(testing)
testing<-testing[, colSums(is.na(testing)) != nrow(testing)]
dim(testing)
training <-read.table(trainingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
testing <-read.table(testingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
print(dim(training)) ##19622 x 160
print(dim(testing)) ##20 x 160
training <- training[,8:160] ##19622 xx 153
testing <- testing[,8:160] ##20 x 153
x<-training[, colSums(is.na(training)) != nrow(training)]
y<-testing[, colSums(is.na(testing)) != nrow(testing)]
names(testing)
names(y)
names(x)
y<-testing[, colSums(is.na(testing)) != nrow(testing)]
names(y)
x<-training[, names(y)]
x<-subset(training, select=names(y))
x<-subset(training, select=c(names(y))
)
col<-names(y)
class(col)
col
x<-subset(training, select=col)
x<-training[,col]
x<-training[,"problem_id"]
x<-training[,"problem_id"]
training <- training[,8:160] ##19622 xx 153
dim(training)
trainingdatafile<-"pml-training.csv"
training <-read.table(trainingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
testingdatafile<-"pml-testing.csv"
testing <-read.table(testingdatafile, header=TRUE, sep=",", na.strings=c("NA","#DIV/0!",""),
stringsAsFactors=FALSE)
print(dim(training)) ##19622 x 160
print(dim(testing)) ##20 x 160
training <- training[,8:160] ##19622 xx 153
testing <- testing[,8:160] ##20 x 153
y<-testing[, colSums(is.na(testing)) != nrow(testing)]
col<-names(y)
x<-subset(training, select=col)
x<-training[,col]
col
coltraining<-names(training)
coltraining
x<-training[,colnames(training) %in% coly]
y<-testing[, colSums(is.na(testing)) != nrow(testing)]
coly<-names(y)
x<-training[,colnames(training) %in% coly]
names(x)
training <- training[,8:160] ##19622 xx 153
testing <- testing[,8:160] ##20 x 153
dim(training)
dim(testing)
names(training)
names(testing)
coly<-names(y)
coly<-coly[1:length(coly)-1]
coly
coly<-list(coly, "classe")
coly
coly<-names(y)
coly<-coly[1:length(coly)-1]
coly<-list(coly, list("classe"))
coly
coly<-names(y)
coly<-coly[1:length(coly)-1]
coly<-c(coly, "classe")
xoly
coly
testingClean<-testing[, colSums(is.na(testing)) != nrow(testing)]
testingCleanCol<-names(testingClean)
testingCleanCol<-testingCleanCol[1:length(testingNotNACol)-1] ##Except the problm id column
testingCleanCol<-c(testingCleanCol, "classe") ##Retain the classe column
##Retain only the above columns in the training set to that they match with the testing set
trainingClean<-training[,colnames(training) %in% testingCleanCol]
testingCleanCol<-names(testingClean)
testingCleanCol<-testingCleanCol[1:length(testingCleanCol)-1] ##Except the problm id column
testingCleanCol<-c(testingCleanCol, "classe") ##Retain the classe column
##Retain only the above columns in the training set to that they match with the testing set
trainingClean<-training[,colnames(training) %in% testingCleanCol]
print(dim(training))
print(dim(trainingClean))
print(dim(testingClean))
nsv <- nearZeroVar(trainingClean, saveMetrics=TRUE)
nsv
class(trainingNearZeroVar)
trainingNearZeroVar <- nearZeroVar(trainingClean, saveMetrics=TRUE)
class(trainingNearZeroVar)
trainingNearZeroVar<-trainingNearZeroVar[,zeroVar==TRUE]
trainingNearZeroVar<-trainingNearZeroVar[,zeroVar=TRUE]
trainingNearZeroVar<-subset(trainingNearZeroVar, zeroVar==TRUE]
trainingNearZeroVar<-subset(trainingNearZeroVar, zeroVar==TRUE)
print(nrow(trainingNearZeroVar))
intrainpart<-createDataPartition(y=trainingClean$classe,p=0.70, list=FALSE)
trainingpart<-trainingClean[intrainpart,]
testingpart<-trainingClean[-intrainpart,]
print(dim(trainingpart)) ##13737 x 160
print(dim(testingpart)) ##5885 x 160
set.seed(56789)
intrainpart<-createDataPartition(y=trainingClean$classe,p=0.70, list=FALSE)
trainingpart<-trainingClean[intrainpart,]
testingpart<-trainingClean[-intrainpart,]
print(dim(trainingpart)) ##13737 x 53
print(dim(testingpart)) ##5885 x 53
set.seed(56789)
rpartModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rpart")
print(rpartModel, digits=3)
set.seed(56789)
rpartModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rpart")
print(rpartModel$finalModel)
print(rpartModel)
predictionsrpart <- predict(rpartModel, newdata=testingpart)
print(confusionMatrix(predictionsrpart, testingpart$classe))
##Create the regression model using the trainingpart set
set.seed(56789)
rforestModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rf", prox=TRUE)
suppressWarnings(library(randomForest))
suppressWarnings(library(rattle))
set.seed(56789)
rpartModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rpart",      preProcess=c("center", "scale"), trControl=trainControl(method = "cv"))
print(rpartModel)
fancyRpartPlot(rpartModel)
set.seed(56789)
rpartModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rpart",      trControl=trainControl(method="cv"), number=3)
print(rpartModel)
fancyRpartPlot(rpartModel)
set.seed(56789)
rpartModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rpart",        trControl=trainControl(method="cv"), number=3)
print(rpartModel)
fancyRpartPlot(rpartModelfinalModel)
fancyRpartPlot(rpartModel$finalModel)
set.seed(56789)
rforestModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rf", prox=TRUE, trControl=trainControl(method="cv"), number=3)
set.seed(56789)
rforestModel <- train(trainingpart$classe ~ ., data = trainingpart, method="rf",  preProcess=c("center", "scale"), trControl=trainControl(method="cv"), number=3)
library(randomForest)
